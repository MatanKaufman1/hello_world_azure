trigger:
  branches:
    include:
      - dev
      - main
    

pool:
  name: azureAgent


variables:
- group: azure-env-group
- name:  buildConfiguration
  value: 'Release'
- name: artifactName
  value: 'feed-azure'
- name: artifactVersion
  value: '1.0.$(Build.BuildId)-$(Build.SourceBranchName)'
- name: projectFile
  value: '$(Build.SourcesDirectory)/azure-helloWorld.csproj'
- name: nugetFeed
  value: '92d7f46c-db9b-4ce4-9eb9-1d02c9b3e668/7443abf4-fbf7-43fa-9b0a-800e4e335c00'

jobs:
  - job: DevTasks
    displayName: 'Dev Branch : SonarQube, NuGet, and Publish'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
    steps:
      - checkout: self
        fetchDepth: 0

      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '8.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet

      - task: NuGetToolInstaller@1
        displayName: 'Install NuGet Tool'

      - task: NuGetAuthenticate@1
        displayName: 'Authenticate with Azure Artifacts'

      - task: SonarQubePrepare@6
        displayName: 'Prepare SonarQube Analysis'
        inputs:
          SonarQube: 'SonarQube'
          scannerMode: 'MSBuild'
          organization: 'matan-organization'
          projectKey: 'hello-world-azure-key'
          projectName: 'hello-world-azure'

      - task: DotNetCoreCLI@2
        displayName: 'Restore Dependencies'
        inputs:
          command: 'restore'
          projects: '$(projectFile)'

      - task: DotNetCoreCLI@2
        displayName: 'Build Project'
        inputs:
          command: 'build'
          projects: '$(projectFile)'
          arguments: '--configuration $(buildConfiguration)'

      - task: SonarQubeAnalyze@6
        inputs:
          jdkVersionOption: 'JDKVersion'
          jdkVersion: '$(JAVA_HOME)'
          jdkArchitecture: 'x64'
        displayName: 'Run SonarQube Analysis'
        

      - task: SonarQubePublish@6
        displayName: 'Publish SonarQube Results'
        inputs:
          pollingTimeoutSec: '300'

      - task: DotNetCoreCLI@2
        displayName: 'Pack NuGet Package'
        inputs:
          command: 'pack'
          packagesToPack: '$(projectFile)'
          configuration: '$(buildConfiguration)'
          versioningScheme: 'byEnvVar'
          versionEnvVar: 'artifactVersion'
          packDirectory: '$(Build.ArtifactStagingDirectory)'

      - task: DotNetCoreCLI@2
        displayName: 'Push NuGet Package to Azure Artifacts'
        inputs:
          command: 'push'
          packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
          nuGetFeedType: 'internal'
          publishVstsFeed: '$(nugetFeed)'

      - script: |
          echo "The artifact version is:" '$(artifactVersion)'
        displayName: ECHO VERSION

      - script: |
          SUBJECT="Azure DevOps Pipeline Status: $(Build.DefinitionName) - $(Build.BuildId)"
          BODY="On $(Build.Repository.Provider) - $(Build.Repository.Name) Repository:"
          BODY="${BODY}The build pipeline has completed with status: $(Agent.JobStatus)\n\n"
          BODY="${BODY}Pipeline Name: $(Build.DefinitionName)\n"
          BODY="${BODY}Branch: $(Build.SourceBranchName)\n"
          BODY="${BODY}Go To Repo: $(Build.Repository.Uri)\n"

          
          curl -v --url 'smtp://smtp.gmail.com:587' --ssl-reqd \
              --mail-from "$(GMAIL_USER)" --mail-rcpt "$(GMAIL_USER)" \
              --upload-file <(echo -e "Subject: $SUBJECT\n\n$BODY") \
              --user "$(GMAIL_USER):$(GMAIL_PASSWORD)" --insecure
        displayName: 'Send Pipeline Status Email'
        condition: always()
      

  - job: MainTasks
    displayName: 'Main Branch : Build, Pack, and Publish Project'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: DotNetCoreCLI@2
      displayName: 'Restore Dependencies'
      inputs:
        command: 'restore'
        projects: '$(projectFile)'

    - task: DotNetCoreCLI@2
      displayName: 'Build Project'
      inputs:
        command: 'build'
        projects: '$(projectFile)'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Pack NuGet Package'
      inputs:
        command: 'pack'
        packagesToPack: '$(projectFile)'
        configuration: '$(buildConfiguration)'
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'artifactVersion'
        packDirectory: '$(Build.ArtifactStagingDirectory)'

    - task: DotNetCoreCLI@2
      displayName: 'Push NuGet Package to Azure Artifacts'
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: '$(nugetFeed)'

    - script: |
       echo "Artifact Version: $(Build.BuildId)"
      displayName: 'Print Artifact Version'

    - script: |
        rm -rf $(Build.ArtifactStagingDirectory)
      displayName: 'Clean Up Artifact'


    - script: |
        SUBJECT="Azure DevOps Pipeline Status: $(Build.DefinitionName) - $(Build.BuildId)"
        BODY="On $(Build.Repository.Provider) - $(Build.Repository.Name) Repository:"
        BODY="${BODY}The build pipeline has completed with status: $(Agent.JobStatus)\n\n"
        BODY="${BODY}Pipeline Name: $(Build.DefinitionName)\n"
        BODY="${BODY}Branch: $(Build.SourceBranchName)\n"
        BODY="${BODY}Go To Repo: $(Build.Repository.Uri)\n"

        
        curl -v --url 'smtp://smtp.gmail.com:587' --ssl-reqd \
            --mail-from "$(GMAIL_USER)" --mail-rcpt "$(GMAIL_USER)" \
            --upload-file <(echo -e "Subject: $SUBJECT\n\n$BODY") \
            --user "$(GMAIL_USER):$(GMAIL_PASSWORD)" --insecure
      displayName: 'Send Pipeline Status Email'
      condition: always()
  