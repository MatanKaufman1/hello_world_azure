trigger:
  branches:
    include:
      - dev
      - main

pool:
  name: matanAgent



variables:
  buildConfiguration: 'Release'
  artifactName: 'feed-matan'
  artifactVersion: '1.0.$(Build.BuildId)-$(Build.SourceBranchName)'
  projectFile: '$(Build.SourcesDirectory)/azure-helloWorld.csproj'
  nugetFeed: '92d7f46c-db9b-4ce4-9eb9-1d02c9b3e668/7443abf4-fbf7-43fa-9b0a-800e4e335c00'

jobs:
  - job: DevTasks
    displayName: 'Dev Branch : SonarQube, NuGet, and Publish'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
    steps:
      - checkout: self
        fetchDepth: 0

      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '8.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet

      - task: NuGetToolInstaller@1
        displayName: 'Install NuGet Tool'

      - task: NuGetAuthenticate@1
        displayName: 'Authenticate with Azure Artifacts'

      - task: SonarQubePrepare@6
        displayName: 'Prepare SonarQube Analysis'
        inputs:
          SonarQube: 'SonarQube'
          scannerMode: 'MSBuild'
          organization: 'matankaufman1'
          projectKey: 'matankaufman1_hello-world-azure'
          projectName: 'hello-world-azure'

      - task: DotNetCoreCLI@2
        displayName: 'Restore Dependencies'
        inputs:
          command: 'restore'
          projects: '$(projectFile)'

      - task: DotNetCoreCLI@2
        displayName: 'Build Project'
        inputs:
          command: 'build'
          projects: '$(projectFile)'
          arguments: '--configuration $(buildConfiguration)'

      - task: SonarQubeAnalyze@6
        inputs:
          jdkVersionOption: 'JDKVersion'
          jdkVersion: '$(JAVA_HOME)'
          jdkArchitecture: 'x64'
        displayName: 'Run SonarQube Analysis'
        

      - task: SonarQubePublish@6
        displayName: 'Publish SonarQube Results'
        inputs:
          pollingTimeoutSec: '300'

      - task: DotNetCoreCLI@2
        displayName: 'Pack NuGet Package'
        inputs:
          command: 'pack'
          packagesToPack: '$(projectFile)'
          configuration: '$(buildConfiguration)'
          versioningScheme: 'byEnvVar'
          versionEnvVar: 'artifactVersion'
          packDirectory: '$(Build.ArtifactStagingDirectory)'

      - task: DotNetCoreCLI@2
        displayName: 'Push NuGet Package to Azure Artifacts'
        inputs:
          command: 'push'
          packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
          nuGetFeedType: 'internal'
          publishVstsFeed: '$(nugetFeed)'

      - script: |
          echo "The artifact version is:" '$(artifactVersion)'
        displayName: ECHO VERSION
